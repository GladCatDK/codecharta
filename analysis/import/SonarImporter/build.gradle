apply plugin: 'java'
apply plugin: 'application'

dependencies {
    compile project(':model')
    compile 'io.reactivex.rxjava2:rxjava:2.1.9'
    compile 'com.sun.activation:javax.activation:1.2.0'
    compile 'org.glassfish.jersey.core:jersey-client:2.26'
    compile 'org.glassfish.jersey.inject:jersey-hk2:2.26'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    compile 'com.beust:jcommander:1.72'
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    testCompile "junit:junit:4.12"
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.11'
    testCompile "com.github.tomakehurst:wiremock:2.14.0"
}

mainClassName = "de.maibornwolff.codecharta.importer.sonar.SonarImporterMain"
applicationName = 'codecharta-sonarimport'

jar {
    baseName = "${applicationName}"
    manifest {
        attributes 'Main-Class': mainClassName
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

compileJava {
    options.compilerArgs += ['--release', '8']
}

compileTestJava {
    options.compilerArgs += ['--release', '8']
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/model/**',
                              '**/sonar/SonarImporterMain*',
                              '**/sonar/SonarImporterParameter*'])
        })
    }
}
